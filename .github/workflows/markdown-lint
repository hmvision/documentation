#!/usr/bin/env node

const remark = require('remark');
const fsPromises = require('fs').promises;
const process = require('process');
const util = require('util');
const glob = util.promisify(require('glob'));
const report = require('vfile-reporter');
const stringify = require('remark-stringify')

// linters
const noDeadUrls = require('remark-lint-no-dead-urls');
const validateLinks = require('remark-validate-links');

// transformers
const normalizeHeadings = require('remark-normalize-headings');
const wordWrap = require('remark-word-wrap');

// create processor
const markdownProcessor = remark()
  .use(validateLinks)
  .use(noDeadUrls,  { skipOffline: true });

const fix = process.argv[2] === "fix";
if (fix) {
  markdownProcessor
    .use(stringify, {
      fences: true
    })
    // wrap markdown at 80 characters
    .use(wordWrap, {width: 80})
    .use(normalizeHeadings);
}

// process the files
(async ()=>{
  let files=[];
  if (process.env.CI) {
    try {
      files =
        JSON.parse(await fsPromises.readFile(process.env.HOME + "/files_modified.json"))
          .concat(JSON.parse(await fsPromises.readFile(process.env.HOME + "/files_added.json")))
          .filter(file => file.endsWith(".md"));
    } catch(e) {
      console.error(e);
    }
  } else {
    files = await glob("**/*.md", {
      ignore: ["node_modules/**/*.md","_*" ]
    });
  }
  if (files.length === 0) {
    console.info("Nothing to do: no markdown files to lint.");
    process.exit(0);
  }
  for (let file of files) {
    console.info(`>>> Checking ${fix ? "and fixing":""} ${file} ...`);
    let vFile;
    try {
      vFile = await markdownProcessor.process(await fsPromises.readFile(file, "utf-8"));
    } catch (e) {
      console.error(e);
      process.exit(1);
    }
    let result = report(vFile);
    if (result !== "no issues found") {
      console.warn(result);
      process.exit(2);
    } else if (fix) {
      await fsPromises.writeFile(file, String(vFile), "utf-8");
    }
  }
})();
